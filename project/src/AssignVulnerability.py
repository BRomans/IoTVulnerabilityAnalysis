import json
import sys
import fileinput


def load_target_vulnerabilities():
    # todo load target vulnerabilities in memory
    with open('resources/target-vulnerabilities.json', 'r') as json_data:
        # json_data = open('resources/target-vulnerabilities.json', 'r')
        data = json.loads(json_data.read())
        json_data.close()
        return data


def calculate_net_protocols_vulnerabilities(json_device, t_vulnerabilities):
    # todo calculate all vulnerabilities using json fields
    vulnerabilities_count = 0
    for key, value in json_device.items():
        if key in t_vulnerabilities and str(t_vulnerabilities[key]) == str(value):
            vulnerabilities_count += 1
            #print(key + ":" + value)
    json_device["net_protocols_vuln_count"] = vulnerabilities_count
    if vulnerabilities_count == 0:
        json_device["net_protocols_risk_level"] = "none"
    if vulnerabilities_count == 1:
        json_device["net_protocols_risk_level"] = "low"
    if vulnerabilities_count == 2:
        json_device["net_protocols_risk_level"] = "medium"
    if vulnerabilities_count >= 3:
        json_device["net_protocols_risk_level"] = "high"
    # print("Vulnerabilities found: " + str(vulnerabilities_count))
    return json_device


def calculate_cve_vulnerabilities(json_device):
    # calculate cve vulnerabilities
    cve_vulnerabilities_count = 0
    if "vulns" in json_device:
        cve_vulnerabilities_count = len(json_device["vulns"])
    json_device["cve_vuln_count"] = cve_vulnerabilities_count
    if cve_vulnerabilities_count == 0:
        json_device["cve_risk_level"] = "none"
    if cve_vulnerabilities_count > 0 and cve_vulnerabilities_count <= 3:
        json_device["cve_risk_level"] = "low"
    if cve_vulnerabilities_count > 3 and cve_vulnerabilities_count <=7:
        json_device["cve_risk_level"] = "medium"
    if cve_vulnerabilities_count > 7:
        json_device["cve_risk_level"] = "high"

    return json_device


def extract_vulnerabilities_to_device_root(json_device):

    for element in json_device["data"]:
        if "ssh" in element and element["port"] == 22:
            json_device["ssh"] = 22
        if "ssl" in element:
            json_device["ssl"] = "True"
        if "ssl" not in element:
            json_device["ssl"] = "False"
        if "tls" in element:
            json_device["tls"] = "True"
        if "telnet" in element and (element["telnet"] is True or element["telnet"] is "True"):
            json_device["telnet"] = "True"

    return json_device


def main():
    # Read all data coming from stdin. Infinite loop.
    # next lines are for opening json files from command line
    #
    # for input_file in sys.argv[1:]:
    #   with open(input_file, 'r') as json_data:

    # next lines are for opening json files from stdin
    for json_data in fileinput.input():
        # Parse JSON data.
        parsed_json = json.loads(json_data)
        # print("Analyzing IOT device with address: " + parsed_json['ip_str'])

        # extracting all vulnerabilities from data to root of device json
        parsed_json = extract_vulnerabilities_to_device_root(parsed_json)
        # calculate and insert np vulnerabilities and risk level in device json using the vulnerabilities dictionary
        parsed_json = calculate_net_protocols_vulnerabilities(parsed_json, target_vulnerabilities)
        # calculate and insert cve vulnerabilities and risk level in device json using field vulns
        parsed_json = calculate_cve_vulnerabilities(parsed_json)
        json.dump(parsed_json, sys.stdout, indent=4)
        #print(json.dumps(parsed_json))
        # print("\n-----------------------------------")


# Load target vulnerabilities
target_vulnerabilities = load_target_vulnerabilities()
main()
